<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Xamarin.Forms.Core</name>
    </assembly>
    <members>
        <member name="T:C1.Xamarin.Forms.Core.C1Animation">
            <summary>
            Contains information about a specific animation.      
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1Animation.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xamarin.Forms.Core.C1Animation"/>.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1Animation.StartDelay">
            <summary>
            Gets or sets the elapsed time before the animation starts.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1Animation.Duration">
            <summary>
            Gets or sets the duration time of the animation.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1Animation.Easing">
            <summary>
            Gets or sets the easing funtion used to interpolate the values of the animation.
            </summary>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1Easing">
            <summary>
            Easing function used to interpolate the values of an animation.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1Easing.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xamarin.Forms.Core.C1Easing"/>.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1Easing.#ctor(System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Xamarin.Forms.Core.C1Easing"/>.
            </summary>
            <param name="function">Easing function.</param>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1Easing.CircleOut">
            <summary>
            Gets a circle easing function.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1Easing.CircleIn">
            <summary>
            Gets a circle easing function.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1Easing.Linear">
            <summary>
            Gets a linear easing function.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1Easing.Ease(System.Double)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1Easing.GetEasingFunction">
            <summary>
            Gets the easing function.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1Easing.op_Implicit(Xamarin.Forms.Easing)~C1.Xamarin.Forms.Core.C1Easing">
            <summary>
            Allows assigning a <see cref="T:C1.Xamarin.Forms.Core.C1Easing"/> from a Xamarin Forms counterpart.
            </summary>
            <param name="easing"></param>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1CheckBox">
            <summary>
            Represents a control that a user can select and clear.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xamarin.Forms.Core.C1CheckBox"/> class.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1CheckBox.IsChecked">
            <summary>
            Gets or sets whether the <see cref="T:C1.Xamarin.Forms.Core.C1CheckBox"/> is checked.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1CheckBox.IsReadOnly">
            <summary>
            Gets or sets whether the <see cref="T:C1.Xamarin.Forms.Core.C1CheckBox"/> is read only.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1CheckBox.Color">
            <summary>
            Gets or sets the color used to paint the control.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1CheckBox.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this object.
            </summary>
        </member>
        <member name="E:C1.Xamarin.Forms.Core.C1CheckBox.Checked">
            <summary>
            Occurs after the value of checkBox changes
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1CheckBox.OnChecked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Checked" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1ToggleButton">
            <summary>
            Represents a button that a user can expand and collapse.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xamarin.Forms.Core.C1ToggleButton"/> class.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.IsChecked">
            <summary>
            Gets or sets whether the <see cref="T:C1.Xamarin.Forms.Core.C1ToggleButton"/> is checked.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.Color">
            <summary>
            Gets or sets the color used to paint the control.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.BorderWidth">
            <summary>
            Gets or sets the width of the border.
            </summary>
            <remarks>
            Set this value to a non-zero value in order to have a visible border.
            </remarks>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.Padding">
            <summary>
            Gets or sets the padding of the button.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.CheckedText">
            <summary>
            Gets or sets the text show when the button is checked.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.UncheckedText">
            <summary>
            Gets or sets the text shown when the button is unchecked.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.CheckedImageSource">
            <summary>
            Gets or sets the image show when the button is checked.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.UncheckedImageSource">
            <summary>
            Gets or sets the image shown when the button is unchecked.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.CheckedContent">
            <summary>
            Gets or sets the content show when the button is checked.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1ToggleButton.UncheckedContent">
            <summary>
            Gets or sets the content shown when the button is unchecked.
            </summary>
        </member>
        <member name="E:C1.Xamarin.Forms.Core.C1ToggleButton.Checked">
            <summary>
            Occurs after the value of checkBox changes
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1ToggleButton.OnChecked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Checked" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.AsyncEventArgs">
            <summary>
            Provides event data for asynchronous events.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.AsyncEventArgs.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the comlete method.
            </remarks>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.Deferral">
            <summary>
            Deferral used to block the event until <see cref="M:C1.Xamarin.Forms.Core.Deferral.Complete"/> method is called. 
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.Deferral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Xamarin.Forms.Core.Deferral"/> class.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.Deferral.Complete">
            <summary>
            Notifies the event the handler is ready to continue.
            </summary>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.ColorEx">
            <summary>
            Provides access to system colors according to the current theme.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.IsDarkTheme">
            <summary>
            Gets a value indicating whether the app is using a dark theme.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.ThemeBackgroundColor">
            <summary>
            Gets the color of the theme background.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.ThemeForegroundColor">
            <summary>
            Gets the color of the theme foreground.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.AccentBackground">
            <summary>
            Gets the accent background.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.AccentForeground">
            <summary>
            Gets the accent foreground.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.ThemeEditorBackgroundColor">
            <summary>
            Gets the color of the theme used to pain the background of the editors.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.ThemeEditorForegroundColor">
            <summary>
            Gets the color of the theme used to pain the foreground of the editors.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.ThemeHeaderBackgroundColor">
            <summary>
            Gets the color of the theme used to pain the headers.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.ThemeHeaderForegroundColor">
            <summary>
            Gets the color of the theme used to pain the headers foreground.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.ColorEx.ThemeBorderColor">
            <summary>
            Gets the color of the theme used to pain the borders.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.ColorEx.IsDefaultColor(Xamarin.Forms.Color)">
            <summary>
            Determines whether the specified color is the default color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.ColorEx.FromARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a color from the ARGB components.
            </summary>
            <param name="a">The alpha channel.</param>
            <param name="r">The Red component.</param>
            <param name="g">The Green component.</param>
            <param name="b">The Blue component.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.ColorEx.WithAlpha(Xamarin.Forms.Color,System.Byte)">
            <summary>
            Creates a new color modifying the alpha channel.
            </summary>
            <param name="color">The color.</param>
            <param name="a">a.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.DateTimeEx.FromOADate(System.Double)">
            <summary>
            Returns a System.DateTime equivalent to the specified OLE Automation date.
            </summary>
            <param name="d">An OLE Automation date value.</param>
            <returns>An object that represents the same date and time as the d parameter.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.DateTimeEx.ToOADate(System.DateTime)">
            <summary>
            Converts the value of this instance to the equivalent OLE Automation date.
            </summary>
            <param name="date">The date that will be converted</param>
            <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.DoubleEx.EqualsOrBothNanOrInfinity(System.Double,System.Double)">
            <summary>
            Returns true when both numbers are equal or both are Nan or both are PositiveInfinity or both are NegativeInfinity.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.ObjectEx.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <remarks>
            This extension DON'T evaluate ICustomTypeDescriptor interface. 
            Use generic extension with the same name if you are evaluating the path 
            of a DataTable or any object that implements ICustomTypeDescriptor.
            </remarks>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns>The value contained in the property</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.ObjectEx.SetPropertyValue``1(System.Object,System.String,``0,Xamarin.Forms.IValueConverter,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Sets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T">Type of the property to set.</typeparam>
            <param name="target">Object that contains the property.</param>
            <param name="path">Name or path of the property that contains the value.</param>
            <param name="value">New value for the property.</param>
            <param name="converter">Converter to use when setting the property.</param>
            <param name="converterParameter">Parameter passed to the converter.</param>
            <param name="culture">Culture information to use when converting values.</param>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.StringEx.SplitCamel(System.String,System.Boolean)">
            <summary>
            Insert spaces between words identified by the camel nomenclature.
            </summary>
            <param name="s">The origianl string.</param>
            <param name="capitalizeFirst">When set to true the resulting string will have its first word capitalized despite the original string capitalization.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.TypeEx">
            <summary>
            The <see cref="T:C1.Xamarin.Forms.Core.TypeEx"/> class provides useful extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.New``1(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.New(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.GetDefaultPublicCtor(System.Type)">
            <summary>
            Returns default public instance parameter-less constructor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.New``1(System.Type,System.Action{``0})">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="initializers">The initializers.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.GetNonNullableType(System.Type)">
            <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then returns double.
            </summary>
            <param name="type">Type.</param>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is nullable.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is numeric.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.IsNumericIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an integral numeric.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.IsNumericIntegralSigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a signed integral numeric.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.IsNumericIntegralUnsigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an unsigned integral numeric.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.IsNumericNonIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a non-integral numeric.</returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.TypeEx.GetEnumValues``1(System.Type)">
            <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumType">Enum type.</param>
            <returns>The list of values for that enum type.</returns>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.ViewEx">
            <summary>
            View extensions
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.ViewEx.GetChildren(Xamarin.Forms.View,System.Boolean,System.Boolean)">
            <summary>
            Finds all the children of a given <see cref="T:Xamarin.Forms.View"/>.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.ViewEx.GetImage(Xamarin.Forms.View)">
            <summary>
            Get the byte array of the control image.
            This byte array comes from a UIImagePNGRepresentation in iOS, TrueColorAlpha of PNG format in WP, Bitmap in Android.
            </summary>
            <returns>A byte array with certain image format.</returns>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1LicensedControlAttribute">
            <summary>
            Marks a control class that must depend on C1 license
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1LicensedControlAttribute.#ctor">
            <summary>
            Constructs an entinty of C1LicensedControlAttribute
            </summary>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.LicenseManager">
            <summary>
            Allows the users to set a license in the <see cref="P:Key"/> property.
            </summary>
            <remarks>
            See http://www.goxuni.com/licensing for more information.
            </remarks>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.LicenseManager.GCDTLicenses">
            <summary>
            Stores license information from XML file
            </summary>
        </member>
        <member name="F:C1.Xamarin.Forms.Core.LicenseManager.GCDTLicenses.LicenseList">
            <summary>
            A list of licenses in a file
            </summary>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.LicenseManager.GCDTLicense">
            <summary>
            Represent a license
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.LicenseManager.GCDTLicense.Id">
            <summary>
            License ID
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.LicenseManager.GCDTLicense.Text">
            <summary>
            License key
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.LicenseManager.#cctor">
            <summary>
            Performs search for license key and loads it if license key file is available.
            Programmatically set key has priority, as this initializer runs before any code referring to LicenseManager
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.LicenseManager.Key">
            <summary>
            Sets the key that will be used to check whether the application has a valid license.
            </summary>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.DefaultValueConverter">
            <summary>
            Converts a value into a specified type.
            </summary>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1DoubleCollectionTypeConverter">
            <summary>
            Converts a coma-separated list of values to an array of double's.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1DoubleCollectionTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns a Boolean value that indicates whether or not the derived type converter can convert <paramref name="sourceType" /> to its target type.
            </summary>
            <param name="sourceType">To type to be converted.</param>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1DoubleCollectionTypeConverter.ConvertFromInvariantString(System.String)">
            <summary>
            Converts an string that can be cast to the target type.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1TappedEventArgs">
            <summary>
            Provides event data for tapping the control.
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1TappedEventArgs.HitPoint">
            <summary>
            The x- and y-coordinates of the pointer position
            </summary>
        </member>
        <member name="P:C1.Xamarin.Forms.Core.C1TappedEventArgs.Handled">
            <summary>
             Gets or sets a value that marks the routed event as handled.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1TappedEventArgs.#ctor(Xamarin.Forms.Point)">
            <summary>
            Initializes a new instance of the C1TappedEventArgs
            </summary>
            <param name="p">The hit point when tapped on the screen</param>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1TimeSpanTypeConverter">
            <summary>
            Converts a <see cref="T:System.String"/> containing a number(milliseconds) into a <see cref="T:System.TimeSpan"/>.
            </summary>
            <seealso cref="T:Xamarin.Forms.TypeConverter" />
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1TimeSpanTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns a Boolean value that indicates whether or not the derived type converter can convert <paramref name="sourceType" /> to its target type.
            </summary>
            <param name="sourceType">To type to be converted.</param>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1TimeSpanTypeConverter.ConvertFromInvariantString(System.String)">
            <summary>
            Converts an string that can be cast to the target type.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="T:C1.Xamarin.Forms.Core.C1LayoutOptionsConverter">
            <summary>
            Converts a string into a <see cref="T:Xamarin.Forms.LayoutOptions"/> value.
            </summary>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1LayoutOptionsConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns true if the sourceType is string.
            </summary>
            <param name="sourceType">the type of the source</param>
            <returns></returns>
        </member>
        <member name="M:C1.Xamarin.Forms.Core.C1LayoutOptionsConverter.ConvertFromInvariantString(System.String)">
            <summary>
            Converts to <see cref="T:Xamarin.Forms.LayoutOptions"/> value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
